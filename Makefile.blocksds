# SPDX-License-Identifier: CC0-1.0
#
# SPDX-FileContributor: Antonio Niño Díaz, 2023

ifeq ($(strip $(BLOCKSDS)),)
    $(error "Environment variable BLOCKSDS not found")
endif

# User config
# ===========

NAME		:= atari800

GAME_TITLE := atari800-nds
GAME_SUBTITLE1 := 0.2.1
GAME_SUBTITLE2 := 2022/06/06
GAME_ICON	:= src/nds/icon.gif

# DLDI and internal SD slot of DSi
# --------------------------------

# Root folder of the SD image
SDROOT		:= sdroot
# Name of the generated image it "DSi-1.sd" for no$gba in DSi mode
SDIMAGE		:= image.bin

# Source code paths
# -----------------

GRAPHICS = \
	src/nds/keyboard.png \
	src/nds/keyboard5200.png

SMALL_SOURCES = \
	src/afile.c \
	src/artifact.c \
	src/binload.c \
	src/cartridge_info.c \
	src/cfg.c \
	src/colours.c \
	src/colours_external.c \
	src/colours_ntsc.c \
	src/colours_pal.c \
	src/compfile.c \
	src/crc32.c \
	src/esc.c \
	src/ide.c \
	src/img_tape.c \
	src/monitor.c \
	src/pbi.c \
	src/pbi_scsi.c \
	src/rtime.c \
	src/sio.c \
	src/statesav.c \
	src/sysrom.c \
	src/ui.c \
	src/ui_basic.c \
	src/videomode.c \
	src/votrax.c \
	src/votraxsnd.c \
	src/roms/altirra_5200_os.c \
	src/roms/altirra_basic.c \
	src/roms/altirraos_800.c \
	src/roms/altirraos_xl.c \
	src/nds/main.c

FAST_SOURCES = \
	src/antic.c \
	src/atari.c \
	src/cartridge.c \
	src/cassette.c \
	src/cpu.c \
	src/cycle_map.c \
	src/devices.c \
	src/gtia.c \
	src/input.c \
	src/log.c \
	src/memory.c \
	src/pia.c \
	src/pokey.c \
	src/pokeysnd.c \
	src/screen.c \
	src/sound.c \
	src/util.c \
	src/nds/input.c \
	src/nds/sound.c \
	src/nds/video.c

SOURCES = $(SMALL_SOURCES) $(FAST_SOURCES)

INCLUDEDIRS := src src/nds src/roms

# Defines passed to all files
# ---------------------------

DEFINES		:=

# Libraries
# ---------

LIBS		:= -lmm9 -lnds9 -lc
LIBDIRS		:= $(BLOCKSDS)/libs/maxmod \
		   $(BLOCKSDS)/libs/libnds

# Build artifacts
# ---------------

BUILDDIR	:= build
ELF		:= build/$(NAME).elf
DUMP		:= build/$(NAME).dump
NITROFAT_IMG	:= build/nitrofat.bin
MAP		:= build/$(NAME).map
SOUNDBANKDIR	:= $(BUILDDIR)/maxmod
ROM		:= $(NAME).nds

# Tools
# -----

PREFIX		:= arm-none-eabi-
CC		:= $(PREFIX)gcc
CXX		:= $(PREFIX)g++
OBJDUMP		:= $(PREFIX)objdump
MKDIR		:= mkdir
RM		:= rm -rf

# Verbose flag
# ------------

ifeq ($(VERBOSE),1)
V		:=
else
V		:= @
endif

# Source files
# ------------

SOURCES_BIN :=
SOURCES_PNG := $(GRAPHICS)
SOURCES_AUDIO :=
ifneq ($(SOURCES_AUDIO),)
    INCLUDEDIRS	+= $(SOUNDBANKDIR)
endif

SOURCES_S	:=
SOURCES_C	:= $(SOURCES)
SOURCES_CPP	:=

# Compiler and linker flags
# -------------------------

DEFINES		+= -D__NDS__ -DNDS -DARM9 -D_GNU_SOURCE -DFILENAME_MAX=1024

ARCH		:= -march=armv5te -mtune=arm946e-s

WARNFLAGS	:= -Wall

ifeq ($(SOURCES_CPP),)
    LD	:= $(CC)
else
    LD	:= $(CXX)
endif

INCLUDEFLAGS	:= $(foreach path,$(INCLUDEDIRS),-I$(path)) \
		   $(foreach path,$(LIBDIRS),-I$(path)/include)

LIBDIRSFLAGS	:= $(foreach path,$(LIBDIRS),-L$(path)/lib)

ASFLAGS		+= -x assembler-with-cpp $(DEFINES) $(ARCH) \
		   -mthumb -mthumb-interwork $(INCLUDEFLAGS) \
		   -ffunction-sections -fdata-sections

BASE_CFLAGS	+= $(WARNFLAGS) $(DEFINES) $(ARCH) \
		   -mthumb-interwork $(INCLUDEFLAGS) \
		   -ffunction-sections -fdata-sections \
		   -fomit-frame-pointer

CXXFLAGS	+= -std=gnu++14 $(WARNFLAGS) $(DEFINES) $(ARCH) \
		   -mthumb -mthumb-interwork $(INCLUDEFLAGS) \
		   -ffunction-sections -fdata-sections \
		   -fno-exceptions -fno-rtti \
		   -fomit-frame-pointer

LDFLAGS		:= -mthumb-interwork $(LIBDIRSFLAGS) \
		   -Wl,-Map,$(MAP) -Wl,--gc-sections -nostdlib \
		   -T$(BLOCKSDS)/sys/crts/ds_arm9.mem \
		   -T$(BLOCKSDS)/sys/crts/ds_arm9.ld \
		   -Wl,--no-warn-rwx-segments \
		   -Wl,--start-group $(LIBS) -lgcc -Wl,--end-group

# Intermediate build files
# ------------------------

OBJS_ASSETS	:= $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(SOURCES_BIN))) \
		   $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(SOURCES_PNG)))

HEADERS_ASSETS	:= $(patsubst %.bin,%_bin.h,$(addprefix $(BUILDDIR)/,$(SOURCES_BIN))) \
		   $(patsubst %.png,%.h,$(addprefix $(BUILDDIR)/,$(SOURCES_PNG)))

ifneq ($(SOURCES_AUDIO),)
    OBJS_ASSETS		+= $(SOUNDBANKDIR)/soundbank.c.o
    HEADERS_ASSETS	+= $(SOUNDBANKDIR)/soundbank.h
endif

OBJS_SOURCES	:= $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(SOURCES_S))) \
		   $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(SOURCES_C))) \
		   $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(SOURCES_CPP)))

OBJS_FAST_SOURCES := $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(FAST_SOURCES)))
OBJS_SMALL_SOURCES := $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(SMALL_SOURCES)))

$(OBJS_FAST_SOURCES): CFLAGS := $(BASE_CFLAGS) -O3 -marm
$(OBJS_SMALL_SOURCES): CFLAGS := $(BASE_CFLAGS) -Os -mthumb

OBJS		:= $(OBJS_ASSETS) $(OBJS_SOURCES)

DEPS		:= $(OBJS:.o=.d)

# Targets
# -------

.PHONY: all clean dump dldipatch sdimage

all: $(ROM)

ifneq ($(strip $(NITROFATDIR)),)
# Additional arguments for ndstool
NDSTOOL_FAT	:= -F $(NITROFAT_IMG)

$(NITROFAT_IMG): $(NITROFATDIR)
	@echo "  IMGBUILD $@ $(NITROFATDIR)"
	$(V)sh $(BLOCKSDS)/tools/imgbuild/imgbuild.sh $@ $(NITROFATDIR)

# Make the NDS ROM depend on the filesystem image only if it is needed
$(ROM): $(NITROFAT_IMG)
endif

$(ROM): $(ELF)
	@echo "  NDSTOOL $@"
	$(V)$(BLOCKSDS)/tools/ndstool/ndstool -c $@ \
		-7 $(BLOCKSDS)/sys/default_arm7/arm7.elf -9 $(ELF) \
		-b $(GAME_ICON) "$(GAME_TITLE);$(GAME_SUBTITLE1);$(GAME_SUBTITLE2)" \
		$(NDSTOOL_FAT)

$(ELF): $(OBJS)
	@echo "  LD      $@"
	$(V)$(LD) -o $@ $(OBJS) $(BLOCKSDS)/sys/crts/ds_arm9_crt0.o $(LDFLAGS)

$(DUMP): $(ELF)
	@echo "  OBJDUMP   $@"
	$(V)$(OBJDUMP) -h -C -S $< > $@

dump: $(DUMP)

clean:
	@echo "  CLEAN"
	$(V)$(RM) $(ROM) $(DUMP) $(BUILDDIR) $(SDIMAGE)

sdimage:
	@echo "  IMGBUILD $(SDIMAGE) $(SDROOT)"
	$(V)sh $(BLOCKSDS)/tools/imgbuild/imgbuild.sh $(SDIMAGE) $(SDROOT)

dldipatch: $(ROM)
	@echo "  DLDITOOL $(ROM)"
	$(V)$(BLOCKSDS)/tools/dlditool/dlditool \
		$(BLOCKSDS)/tools/dldi/r4tfv2.dldi $(ROM)

# Rules
# -----

$(BUILDDIR)/%.s.o : %.s
	@echo "  AS      $<"
	@$(MKDIR) -p $(@D)
	$(V)$(CC) $(ASFLAGS) -MMD -MP -c -o $@ $<

$(BUILDDIR)/%.c.o : %.c
	@echo "  CC      $<"
	@$(MKDIR) -p $(@D)
	$(V)$(CC) $(CFLAGS) -MMD -MP -c -o $@ $<

$(BUILDDIR)/%.cpp.o : %.cpp
	@echo "  CXX     $<"
	@$(MKDIR) -p $(@D)
	$(V)$(CXX) $(CXXFLAGS) -MMD -MP -c -o $@ $<

$(BUILDDIR)/%.bin.o $(BUILDDIR)/%_bin.h : %.bin
	@echo "  BIN2C   $<"
	@$(MKDIR) -p $(@D)
	$(V)$(BLOCKSDS)/tools/bin2c/bin2c $< $(@D)
	$(V)$(CC) $(CFLAGS) -MMD -MP -c -o $(BUILDDIR)/$*.bin.o $(BUILDDIR)/$*_bin.c

$(BUILDDIR)/%.png.o $(BUILDDIR)/%.h : %.png %.grit
	@echo "  GRIT    $<"
	@$(MKDIR) -p $(@D)
	$(V)$(BLOCKSDS)/tools/grit/grit $< -ftc -W1 -o$(BUILDDIR)/$*
	$(V)$(CC) $(CFLAGS) -MMD -MP -c -o $(BUILDDIR)/$*.png.o $(BUILDDIR)/$*.c

$(SOUNDBANKDIR)/soundbank.c.o $(SOUNDBANKDIR)/soundbank.h : $(SOURCES_AUDIO)
	@echo "  MMUTIL $^"
	@$(MKDIR) -p $(@D)
	@$(BLOCKSDS)/tools/mmutil/mmutil $^ -d \
		-o$(SOUNDBANKDIR)/soundbank.bin -h$(SOUNDBANKDIR)/soundbank.h
	$(V)$(BLOCKSDS)/tools/bin2c/bin2c $(SOUNDBANKDIR)/soundbank.bin \
		$(SOUNDBANKDIR)
	$(V)$(CC) $(CFLAGS) -MMD -MP -c -o $(SOUNDBANKDIR)/soundbank.c.o \
		$(SOUNDBANKDIR)/soundbank_bin.c

# All assets must be built before the source code
# -----------------------------------------------

$(SOURCES_S) $(SOURCES_C) $(SOURCES_CPP): $(HEADERS_ASSETS)

# Include dependency files if they exist
# --------------------------------------

-include $(DEPS)
