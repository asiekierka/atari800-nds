#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITARM)),)
$(error "Please set DEVKITARM in your environment. export DEVKITARM=<path to>devkitARM")
endif

ARCH	:=	-mthumb-interwork -march=armv5te -mtune=arm946e-s

BASE_CFLAGS	:=	-g -Wall -D_GNU_SOURCE -flto \
			-fomit-frame-pointer -ffast-math \
			$(ARCH)

BASE_CFLAGS	+=	$(INCLUDE) -DNDS -DARM9

$(FAST_OFILES): CFLAGS := $(BASE_CFLAGS) -O3 -marm
$(SMALL_OFILES): CFLAGS := $(BASE_CFLAGS) -Os -mthumb

TOPDIR ?= $(CURDIR)
include $(DEVKITARM)/ds_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
#
# NO_SMDH: if set to anything, no SMDH file is generated.
# ROMFS is the directory which contains the RomFS, relative to the Makefile (Optional)
# APP_TITLE is the name of the app stored in the SMDH file (Optional)
# APP_DESCRIPTION is the description of the app stored in the SMDH file (Optional)
# APP_AUTHOR is the author of the app stored in the SMDH file (Optional)
# ICON is the filename of the icon (.png), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.png
#     - icon.png
#     - <libctru folder>/default_icon.png
#---------------------------------------------------------------------------------
TARGET		:=	atari800
BUILD		:=	build
#DATA		:=	data
INCLUDES	:=	src
GAME_ICON	:=	$(TOPDIR)/src/nds/icon.bmp

GAME_TITLE := atari800-nds
GAME_SUBTITLE1 := 0.2.1
GAME_SUBTITLE2 := 2022/06/06

#	src/af80.c \
#	src/bit3.c \
#	src/mzpokeysnd.c \
#	src/pal_blending.c \
#	src/pbi_proto80.c \
#	src/pbi_bb.c \
#	src/pbi_mio.c \
#	src/pbi_xld.c \
#	src/rdevice.c \
#	src/remez.c \
#	src/voicebox.c \
#	src/xep80.c \
#	src/xep80_fonts.c \
#	src/atari_ntsc/atari_ntsc.c \
#	src/filter_ntsc.c \

GRAPHICS = \
	src/nds/keyboard.png \
	src/nds/keyboard5200.png

SMALL_SOURCES = \
	src/afile.c \
	src/artifact.c \
	src/binload.c \
	src/cartridge_info.c \
	src/cfg.c \
	src/colours.c \
	src/colours_external.c \
	src/colours_ntsc.c \
	src/colours_pal.c \
	src/compfile.c \
	src/crc32.c \
	src/esc.c \
	src/ide.c \
	src/img_tape.c \
	src/monitor.c \
	src/pbi.c \
	src/pbi_scsi.c \
	src/rtime.c \
	src/sio.c \
	src/statesav.c \
	src/sysrom.c \
	src/ui.c \
	src/ui_basic.c \
	src/videomode.c \
	src/votrax.c \
	src/votraxsnd.c \
	src/roms/altirra_5200_os.c \
	src/roms/altirra_basic.c \
	src/roms/altirraos_800.c \
	src/roms/altirraos_xl.c \
	src/nds/main.c

FAST_SOURCES = \
	src/antic.c \
	src/atari.c \
	src/cartridge.c \
	src/cassette.c \
	src/cpu.c \
	src/cycle_map.c \
	src/devices.c \
	src/gtia.c \
	src/input.c \
	src/log.c \
	src/memory.c \
	src/pia.c \
	src/pokey.c \
	src/pokeysnd.c \
	src/screen.c \
	src/sound.c \
	src/util.c \
	src/nds/input.c \
	src/nds/sound.c \
	src/nds/video.c

SOURCES = $(SMALL_SOURCES) $(FAST_SOURCES)

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------

CXXFLAGS	:= $(BASE_CFLAGS) -fno-rtti -fno-exceptions
ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=ds_arm9.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

LIBS := -lfat -lmm9 -lnds9 -lz -lm

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(LIBNDS) $(DEVKITPRO)/portlibs/nds $(DEVKITPRO)/portlibs/armv5te

# fast/slow cflags patch
SMALL_CFILES		:=	$(foreach dir,$(SMALL_SOURCES),$(CURDIR)/$(dir))
FAST_CFILES		:=	$(foreach dir,$(FAST_SOURCES),$(CURDIR)/$(dir))

export SMALL_OFILES	:=	$(SMALL_CFILES:.c=.o)
export FAST_OFILES	:=	$(FAST_CFILES:.c=.o)

#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(CURDIR)

export DEPSDIR	:=	

CFILES		:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir))
PNGFILES	:=	$(foreach dir,$(GRAPHICS),$(CURDIR)/$(dir))

export LD	:=	$(CC)
export OFILES	:=	$(addsuffix .o,$(BINFILES)) \
			$(PNGFILES:.png=.o) \
			$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD) \
			-I$(CURDIR)/src \
			-I$(CURDIR)/src/nds

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

icons := $(wildcard *.bmp)

ifneq (,$(findstring $(TARGET).bmp,$(icons)))
        export GAME_ICON := $(CURDIR)/$(TARGET).bmp
else
        ifneq (,$(findstring icon.bmp,$(icons)))
                export GAME_ICON := $(CURDIR)/icon.bmp
        endif
endif

.PHONY: $(BUILD) clean all

#---------------------------------------------------------------------------------
all: $(BUILD)

$(BUILD):
	@[ -d $@ ] || mkdir -p $@
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.nds

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr $(BUILD) $(TARGET).nds $(TARGET).elf


#---------------------------------------------------------------------------------
else

DEPENDS	:=	$(OFILES:.o=.d)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
$(OUTPUT).nds	:	$(OUTPUT).elf
$(OUTPUT).elf	:	$(OFILES)

#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.bin.o	:	%.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

#---------------------------------------------------------------------------------
# This rule creates assembly source files using grit
# grit takes an image file and a .grit describing how the file is to be processed
# add additional rules like this for each image extension
# you use in the graphics folders
#---------------------------------------------------------------------------------
%.s %.h   : %.png %.grit
#---------------------------------------------------------------------------------
	grit $< -fts -o$*

-include $(DEPENDS)

#---------------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------------
